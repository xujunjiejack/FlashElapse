''' This is the main controller for the user side 
	of work. The highest level in the front end
'''

from user_request_receiver import UserRequestAdapter
from user_request_receiver import UserRequestError
from user_commands.cmd_manager import CommandManager
from command_sender_socket import CommandSender

import sys
import json

class RpbController(object):
	''' This is the main controller for the raspberry pi side 
		of work. The highest level in the back end. 
		Its work involves receiving input from the user or the web.
		It also issue commands for camera to run.
		It supervises a lot of things
	'''


	def __init__(self, input_source):

		self.cmd_manager = CommandManager()
		self.translator = CommandTranslator(self.cmd_manager)
		self.command_sender = CommandSender()
		try:
			self.user_request_receiver = UserRequestAdapter(input_source, self.cmd_manager)
		
		except UserRequestError as e:
			print (e.msg);
			sys.exit(2)

		pass;

	def run(self):

		self.user_request_receiver.start_listening(self.send_data)

	def send_data(self,command_text):
		self.command_sender.send(command_text)
		
	def parse_data(self, data):
		try:
			cmd = self.translator.translate(data)
			cmd.execute()
		except TranslationError as e:
			print (e)
		except ShutDownException as e:
			print (e)
			self.controller_exit()

	def controller_exit(self):
		'''This one tells every one the controller is going to be shut down. Save memory '''
		print ("The controlling is quitting")
		self.user_request_receiver.end_listening()
		sys.exit(0)

class CommandTranslator(object):

	def __init__(self, cmd_manager):
		'''Data passed in will become a json object '''
		self.cmd_manager = cmd_manager
	
	def _load_json_(self, data):
		try:
			return json.loads(data)
		except Exception as e:
			print (e)
			raise TranslationError("Bad thing happened during translator")


	def translate(self, data):
		'''This needs to be able to be autogenerated'''
		data_dict = self._load_json_(data)

		for cmd in self.cmd_manager:
			cmd_instance = cmd()
			cmd_name = cmd_instance.get_command_name()
			incoming_message_cmd_name = data_dict[cmd_instance.get_command_name_key()]
			if (incoming_message_cmd_name == cmd_name):
				return cmd_instance.decode(data_dict)
		
		raise TranslationError("No command can decode the incoming message")


class TranslationError(Exception):
	'''This exception indicates it has problem with the translation'''
	def __init__(self,*args,**kwargs):
		Exception.__init__(self,*args,**kwargs)

class  ShutDownException(Exception): pass


